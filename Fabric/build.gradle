plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
    id "me.modmuss50.mod-publish-plugin"
}

def ENV = System.getenv()

base {
    archivesName = "${mod_id}-fabric"
}


dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    implementation group: 'com.electronwill.night-config', name: 'core', version: '3.6.5'
    implementation group: 'com.electronwill.night-config', name: 'toml', version: '3.6.5'

    include group: 'com.electronwill.night-config', name: 'core', version: '3.6.5'
    include group: 'com.electronwill.night-config', name: 'toml', version: '3.6.5'
}

loom {
    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

publishMods {
    file = remapJar.archiveFile

    if(new File("../", "Changelog.md").exists())
        changelog = new File("./../", "Changelog.md").text
    else changelog = ""

    type = STABLE
    modLoaders.add("fabric")

    displayName = "$project.ext.mod_name - Fabric ${minecraft_version} - v${simple_version}"

    curseforge {
        projectId = curse_project
        projectSlug = curse_slug // Required for discord webhook
        accessToken = ENV.CURSE_PAT
        minecraftVersions.add("1.20.2")
    }

    modrinth {
        projectId = modrinth_project
        accessToken = ENV.MODRINTH_PAT
        minecraftVersions.add("1.20.2")
    }
}