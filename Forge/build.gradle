buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '[6.0, 6.2)', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.4.0'
    }
}

plugins {
    id 'idea'
    id 'maven-publish'

    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin'

    id "me.modmuss50.mod-publish-plugin"
}

def ENV = System.getenv()

base {
    archivesName = "${mod_id}-forge"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor "org.spongepowered:mixin:0.8.5-SNAPSHOT:processor"
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}


jar.finalizedBy('reobfJar')

jar {
    manifest {
        attributes([
            "MixinConfigs" : "globalpacks.mixins.json"
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

publishMods {
    file = jar.archiveFile

    if(new File("../", "Changelog.md").exists())
        changelog = new File("./../", "Changelog.md").text
    else changelog = ""

    type = STABLE
    modLoaders.add("forge")

    displayName = "$project.ext.mod_name - Forge ${minecraft_version} - v${simple_version}"

    curseforge {
        projectId = curse_project
        projectSlug = curse_slug // Required for discord webhook
        accessToken = ENV.CURSE_PAT
        minecraftVersions.add("1.20.2")
    }

    modrinth {
        projectId = modrinth_project
        accessToken = ENV.MODRINTH_PAT
        minecraftVersions.add("1.20.2")
    }
}