
buildscript {
    repositories {
        maven {
            name = 'Official Forge Maven'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'Sponge Maven'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

applyRemote("https://raw.github.com/DarkRoleplay/Gradle-Templates/${script_version}/scripts/property_helper.gradle");
applyRemote("https://raw.github.com/DarkRoleplay/Gradle-Templates/${script_version}/scripts/forge.gradle");
applyRemote("https://raw.github.com/DarkRoleplay/Gradle-Templates/${script_version}/scripts/forge_datagen.gradle");
applyRemote("https://raw.github.com/DarkRoleplay/Gradle-Templates/${script_version}/scripts/common_manifest.gradle");
applyRemote("https://raw.github.com/DarkRoleplay/Gradle-Templates/${script_version}/scripts/common_artifacts.gradle");
applyRemote("https://raw.github.com/DarkRoleplay/Gradle-Templates/${script_version}/scripts/maven_publish.gradle");
applyRemote("https://raw.github.com/DarkRoleplay/Gradle-Templates/${script_version}/scripts/curseforge.gradle");

apply from: 'C:/Users/lukas/minecraft_modding/Gradle Templates/scripts/mixin.gradle'

minecraft{
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

//Downloads and caches
def applyRemote(String url){
    mkdir("./gradle/remote_script_cache/")
    def remoteFile = new File('./gradle/remote_script_cache/' + url.md5())

    def shouldDownload = !remoteFile.exists() || remoteFile.lastModified() < (System.currentTimeMillis() - 3.6e+9)
    if(shouldDownload)
        try(def out = new BufferedOutputStream(new FileOutputStream(remoteFile, false))){
            out << new URL(url).openStream();
        }

    if(!remoteFile.exists())
        throw new GradleException('Was unable to fetch "' + url + '" and couldn\'t find file in cache.\n Build is being aborted!')

    apply from: remoteFile
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

jar.finalizedBy('reobfJar')

//If dependencies.gradle exists, apply it
def dependenciesFile = new File('./dependencies.gradle')
if(dependenciesFile.exists())
    apply from: dependenciesFile