buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'idea'
    id 'maven-publish'
}

//The Plugin block only works for plugins in the gradle maven
apply plugin: 'net.minecraftforge.gradle'

version = "${MC_VERSION}-${MOD_VERSION}"
group = 'net.dark_roleplay'
archivesBaseName = 'globaldataandresourcepacks'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20200707-1.16.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('runs/client')
            arg "-mixin.config="+archivesBaseName+".mixins.json"
            property 'forge.logging.console.level', 'debug'

            environment 'MOD_CLASSES',
                    "archivesBaseName%%${project.file('out/production/resources').canonicalPath};" +
                            "archivesBaseName%%${project.file('out/production/classes').canonicalPath}"
        }

        server {
            workingDirectory project.file('runs/server')
            arg "-mixin.config="+archivesBaseName+".mixins.json"
            property 'forge.logging.console.level', 'debug'

            environment 'MOD_CLASSES',
                    "archivesBaseName%%${project.file('out/production/resources').canonicalPath};" +
                            "archivesBaseName%%${project.file('out/production/classes').canonicalPath}"
        }
    }
}

dependencies {
    minecraft([
        group   : 'net.minecraftforge',
        name    : 'forge',
        version : "${MC_VERSION}-${FORGE_VERSION}"
    ])
}

jar {
    manifest {
        attributes([
            "Specification-Title": "globaldataandresourcepacks",
            "Specification-Vendor": "Dark Roleplay",
            "Specification-Version": "0.1",
            "Implementation-Title": "Global Data & Resourcepacks",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Dark Roleplay",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    // Minify json resources
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

idea {
    module {
        for (String excludeDirName in ["run", "out", "runs", ".github", ".idea", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

curseforge {
    apiKey = System.getenv('CURSE_API_KEY') // This should really be in a gradle.properties file
    project {
        id = '317134'
        changelog = file('changelog.txt') // A file can also be set using: changelog = file('changelog.txt')
        releaseType = 'release'
        mainArtifact(jar) {
            displayName = "Global Data Pack - ${MC_VERSION} - v${MOD_VERSION}"
        }
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact reobfArtifact
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url System.getenv("MVN_REPO")
            credentials {
                username System.getenv("MVN_USER")
                password System.getenv("MVN_PASSWORD")
            }
        }
    }
}